version: 1.4.{build}

environment:

  NIX_VERSION: 1.5.0
  NIX_BUILD_DIR: C:\nix_build
  DEPLOY_DIR: deploy
  BOOST_ROOT: C:\Libraries\boost_1_62_0

  NIX_APPVEYOR_ROOT: https://ci.appveyor.com/api/projects/stoewer/nix/artifacts/build


  matrix:
    # Python 2.7 32 bit
    - PYTHON: "C:\\Python27"
      pyver: 2
      bits: 32

    # Python 3.6 32 bit
    - PYTHON: "C:\\Python36"
      pyver: 3
      bits: 32

    # Python 2.7 64 bit
    - PYTHON: "C:\\Python27-x64"
      pyver: 2
      bits: 64

    # Python 3.6 64 bit
    - PYTHON: "C:\\Python36-x64"
      pyver: 3
      bits: 64
      RDP: "no"

init:
  - "ECHO %PYTHON% %vcvars% (%bits%)"
  - ps: $env:PATH = "$env:PYTHON;$env:PATH;C:\Program Files\7-Zip;$env:NIX_BUILD_DIR\nix\bin"
  - python -c "import sys;print('Python version is {}'.format(sys.version))"

install:

    - ps: |
        if ($env:bits -eq "64") {
            $env:vcvars = "x86_amd64"
            $env:avjob = "job=Environment%3A%20PLATFORM%3Dx64%2C%20CONFIGURATION%3DRelease"
            $env:avfname = "nix-$env:NIX_VERSION-win64.exe"
        } else {
            $env:vcvars = "x86"
            $env:avjob = "job=Environment%3A%20PLATFORM%3Dx86%2C%20CONFIGURATION%3DRelease"
            $env:avfname = "nix-$env:NIX_VERSION-win32.exe"
        }
    - ps: |
        if ($env:pyver -eq "2") {
            python -m pip install enum34
        }

    - ps: |
        mkdir "$env:NIX_BUILD_DIR"
        cd "$env:NIX_BUILD_DIR"
        mkdir nix
        cd nix

        $env:nix_exe_url = "$env:NIX_APPVEYOR_ROOT/$env:avfname`?$env:avjob"
        Write-Host "Downloading $env:nix_exe_url"

        Invoke-WebRequest -URI $env:nix_exe_url -OutFile "nix.exe"

        7z x nix.exe

        cd ..

        $env:BOOST_INC_DIR = "$env:BOOST_ROOT\include"
        $env:BOOST_LIB_DIR = "$env:BOOST_ROOT\lib"

    - python -m pip install numpy h5py wheel

    - ps: cd "$env:APPVEYOR_BUILD_FOLDER"

    - ps: $env:DISTUTILS_USE_SDK = "1"

    - ps: $env:MSSdk = "1"

build_script:
    - python setup.py build

test_script:
    - python setup.py test --addopts --force-compat

after_test:
    - ps: mkdir "$env:DEPLOY_DIR"
    - python setup.py bdist_wheel -d %DEPLOY_DIR% %withnix%

artifacts:
- path: $(DEPLOY_DIR)\*
  name: wheels

on_finish:
  - ps: |
      if ($env:RDP -eq "yes") {
          $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      }
